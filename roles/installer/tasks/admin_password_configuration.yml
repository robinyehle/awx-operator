---
- name: Check for specified admin password configuration
  register: _custom_admin_password
  no_log: "{{ no_log }}"
  when: admin_password_secret | length
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ admin_password_secret }}"

- name: Check for default admin password configuration
  register: _default_admin_password
  no_log: "{{ no_log }}"
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-admin-password"

- name: Set admin password secret
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    _admin_password_secret: '{{ _custom_admin_password["resources"] | default([]) | length | ternary(_custom_admin_password, _default_admin_password) }}'

- block:
    - name: Create admin password secret
      no_log: "{{ no_log }}"
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/admin_password_secret.yaml.j2') }}"

    - name: Read admin password secret
      k8s_info:
        kind: Secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}-admin-password"
      register: _generated_admin_password
      no_log: "{{ no_log }}"

  when: not _admin_password_secret['resources'] | default([]) | length

- name: Set admin password secret
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    __admin_password_secret: '{{ _generated_admin_password["resources"] | default([]) | length | ternary(_generated_admin_password, _admin_password_secret) }}'

- name: Store admin password
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    admin_password: "{{ __admin_password_secret['resources'][0]['data']['password'] | b64decode }}"

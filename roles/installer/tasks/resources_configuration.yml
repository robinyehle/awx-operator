---
- name: Get the current resource web pod information.
  register: awx_web_pod
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    label_selectors:
      - app.kubernetes.io/name={{ ansible_operator_meta.name }}-web
      - app.kubernetes.io/managed-by={{ deployment_type }}-operator
      - app.kubernetes.io/component={{ deployment_type }}
    field_selectors:
      - status.phase=Running

- name: Set the resource pod as a variable.
  ansible.builtin.set_fact:
    awx_web_pod: >-
      {{ awx_web_pod['resources']
         | rejectattr('metadata.deletionTimestamp', 'defined')
         | sort(attribute='metadata.creationTimestamp')
         | first | default({}) }}

- name: Set the resource pod name as a variable.
  ansible.builtin.set_fact:
    awx_web_pod_name: "{{ awx_web_pod['metadata']['name'] | default('') }}"

- name: Set user provided control plane ee image
  when:
    - control_plane_ee_image | default([]) | length
  ansible.builtin.set_fact:
    _custom_control_plane_ee_image: "{{ control_plane_ee_image }}"

- name: Set Control Plane EE image URL
  ansible.builtin.set_fact:
    _control_plane_ee_image: "{{ _custom_control_plane_ee_image | default(lookup('env', 'RELATED_IMAGE_CONTROL_PLANE_EE')) | default(_control_plane_ee_image, true)
      }}"

- name: Check for Receptor CA Secret
  register: receptor_ca
  no_log: "{{ no_log }}"
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-receptor-ca"

- name: Migrate Receptor CA Secret
  when:
    - receptor_ca['resources'] | default([]) | length
    - receptor_ca['resources'][0]['type'] != "kubernetes.io/tls"
  block:
    - name: Delete old Receptor CA Secret
      kubernetes.core.k8s:
        state: absent
        kind: Secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}-receptor-ca"

    - name: Create tempfile for receptor-ca.key
      register: _receptor_ca_key_file
      ansible.builtin.tempfile:
        state: file
        suffix: .key

    - name: Copy Receptor CA key from old secret to tempfile
      no_log: "{{ no_log }}"
      ansible.builtin.copy:
        content: "{{ receptor_ca['resources'][0]['data']['receptor-ca.key'] | b64decode }}"
        dest: "{{ _receptor_ca_key_file.path }}"

    - name: Create tempfile for receptor-ca.crt
      register: _receptor_ca_crt_file
      ansible.builtin.tempfile:
        state: file
        suffix: .crt

    - name: Copy Receptor CA cert from old secret to tempfile
      no_log: "{{ no_log }}"
      ansible.builtin.copy:
        content: "{{ receptor_ca['resources'][0]['data']['receptor-ca.crt'] | b64decode }}"
        dest: "{{ _receptor_ca_crt_file.path }}"

    - name: Create New Receptor CA secret
      no_log: "{{ no_log }}"
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/receptor_ca_secret.yaml.j2') }}"

    - name: Read New Receptor CA Secret
      register: _receptor_ca
      no_log: "{{ no_log }}"
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}-receptor-ca"

    - name: Set receptor_ca variable
      no_log: "{{ no_log }}"
      ansible.builtin.set_fact:
        receptor_ca: "{{ _receptor_ca }}"

    - name: Remove tempfiles
      loop:
        - "{{ _receptor_ca_key_file.path }}"
        - "{{ _receptor_ca_crt_file.path }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent

- name: Create Receptor Mesh CA
  block:
    - name: Create tempfile for receptor-ca.key
      tempfile:
        state: file
        suffix: .key
      register: _receptor_ca_key_file
    - name: Generate Receptor CA key
      no_log: "{{ no_log }}"
      ansible.builtin.command: |
        openssl genrsa -out {{ _receptor_ca_key_file.path }} 4096

    - name: Create tempfile for receptor-ca.crt
      tempfile:
        state: file
        suffix: .crt
      register: _receptor_ca_crt_file
    - name: Generate Receptor CA cert
      no_log: "{{ no_log }}"
      ansible.builtin.command: |
        openssl req -x509 -new -nodes -key {{ _receptor_ca_key_file.path }} \
          -subj "/CN={{ ansible_operator_meta.name }} Receptor Root CA" \
          -sha256 -days 3650 -out {{ _receptor_ca_crt_file.path }}

    - name: Create Receptor CA secret
      no_log: "{{ no_log }}"
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/receptor_ca_secret.yaml.j2') }}"

    - name: Read Receptor CA secret
      register: _receptor_ca
      no_log: "{{ no_log }}"
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}-receptor-ca"

    - name: Set receptor_ca variable
      set_fact:
        receptor_ca: "{{ _receptor_ca }}"
      no_log: "{{ no_log }}"
    - name: Remove tempfiles
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ _receptor_ca_key_file.path }}"
        - "{{ _receptor_ca_crt_file.path }}"
  when: not receptor_ca['resources'] | default([]) | length

- name: Check for Receptor work signing Secret
  register: receptor_work_signing
  no_log: "{{ no_log }}"
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-receptor-work-signing"

- name: Generate Receptor work signing RSA key pair
  block:
    - name: Create tempfile for receptor work signing private key
      register: _receptor_work_signing_private_key_file
      ansible.builtin.tempfile:
        state: file
        suffix: .pem

    - name: Generate Receptor work signing private key
      no_log: "{{ no_log }}"
      ansible.builtin.command: |
        openssl genrsa -out {{ _receptor_work_signing_private_key_file.path }} 4096

    - name: Create tempfile for receptor work signing public key
      register: _receptor_work_signing_public_key_file
      ansible.builtin.tempfile:
        state: file
        suffix: .pem

    - name: Generate Receptor work signing public key
      no_log: "{{ no_log }}"
      ansible.builtin.command: |
        openssl rsa \
          -in {{ _receptor_work_signing_private_key_file.path }} \
          -out {{ _receptor_work_signing_public_key_file.path }} \
          -outform PEM -pubout

    - name: Create Receptor work signing Secret
      no_log: "{{ no_log }}"
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/receptor_work_signing_secret.yaml.j2') }}"

    - name: Read Receptor work signing Secret
      register: _receptor_work_signing
      no_log: "{{ no_log }}"
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}-receptor-work-signing"

    - name: Set receptor_work_signing variable
      no_log: "{{ no_log }}"
      ansible.builtin.set_fact:
        receptor_work_signing: "{{ _receptor_work_signing }}"

    - name: Remove tempfiles
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ _receptor_work_signing_private_key_file.path }}"
        - "{{ _receptor_work_signing_public_key_file.path }}"
  when: not receptor_work_signing['resources'] | default([]) | length

- name: Apply Resources
  loop:
    - configmaps/config
    - configmaps/pre_stop_scripts
    - secrets/app_credentials
    - rbac/service_account
    - storage/persistent
    - networking/service
    - networking/ingress
  no_log: "{{ no_log }}"
  kubernetes.core.k8s:
    apply: true
    definition: "{{ lookup('template', item + '.yaml.j2') }}"
    wait: true

- name: Set default awx app image
  ansible.builtin.set_fact:
    _default_image: "{{ _image }}:{{ _image_version }}"

- name: Set user provided awx app image
  when:
    - image | default([]) | length
    - image_version is defined or image_version != ''
  ansible.builtin.set_fact:
    _custom_image: "{{ image }}:{{ image_version }}"

- name: Set AWX app image URL
  ansible.builtin.set_fact:
    _image: "{{ _custom_image | default(lookup('env', 'RELATED_IMAGE_AWX')) | default(_default_image, true) }}"

- name: Set default redis image
  ansible.builtin.set_fact:
    _default_redis_image: "{{ _redis_image }}:{{ _redis_image_version }}"

- name: Set user provided redis image
  when:
    - redis_image | default([]) | length
    - redis_image_version is defined or redis_image_version != ''
  ansible.builtin.set_fact:
    _custom_redis_image: "{{ redis_image }}:{{ redis_image_version }}"

- name: Set Redis image URL
  ansible.builtin.set_fact:
    _redis_image: "{{ _custom_redis_image | default(lookup('env', 'RELATED_IMAGE_AWX_REDIS')) | default(_default_redis_image, true) }}"

- name: Apply deployment resources
  loop:
    - web
    - task
  register: this_deployment_result
  kubernetes.core.k8s:
    apply: true
    definition: "{{ lookup('template', 'deployments/{{ item }}.yaml.j2') }}"

- block:
    - name: Get the new resource pod information after updating resource.
      register: _new_pod
      until:
        - _new_pod['resources'] | length
        - _new_pod['resources'] | rejectattr('metadata.deletionTimestamp', 'defined') | list | length
      retries: 60
      delay: 5
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ ansible_operator_meta.namespace }}"
        label_selectors:
          - app.kubernetes.io/name={{ ansible_operator_meta.name }}-web
          - app.kubernetes.io/managed-by={{ deployment_type }}-operator
          - app.kubernetes.io/component={{ deployment_type }}
        field_selectors:
          - status.phase=Running

    - name: Update new resource pod as a variable.
      ansible.builtin.set_fact:
        awx_web_pod: >-
          {{ _new_pod['resources']
             | rejectattr('metadata.deletionTimestamp', 'defined')
             | sort(attribute='metadata.creationTimestamp')
             | last | default({}) }}

    - name: Update new resource pod name as a variable.
      set_fact:
        awx_web_pod_name: '{{ awx_web_pod["metadata"]["name"] | default("")}}'
  when:
    - this_deployment_result.changed

- name: Verify the resource pod name is populated.
  when: web_replicas | int > 0 or (web_replicas == '' and replicas > 0)
  ansible.builtin.assert:
    that:
      - awx_web_pod_name != ''
    fail_msg: Could not find the tower pod's name.

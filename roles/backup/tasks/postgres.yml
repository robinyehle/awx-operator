---
- name: Get PostgreSQL configuration
  register: pg_config
  no_log: "{{ no_log }}"
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ this_awx['resources'][0]['status']['postgresConfigurationSecret'] }}"

- name: Fail if postgres configuration secret status does not exist
  when: not pg_config | default([]) | length
  ansible.builtin.fail:
    msg: The postgresConfigurationSecret status is not set on the AWX object yet or the secret has been deleted.

- name: Store Database Configuration
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    awx_postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    awx_postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    awx_postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    awx_postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    awx_postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    awx_postgres_type: "{{ pg_config['resources'][0]['data']['type'] | default('unmanaged'|b64encode) | b64decode }}"

- block:
    - name: Delete pod to reload a resource configuration
      when: postgres_label_selector is not defined
      ansible.builtin.set_fact:
        postgres_label_selector: app.kubernetes.io/instance=postgres-{{ supported_pg_version }}-{{ deployment_name }}

    - name: Get the postgres pod information
      register: postgres_pod
      until:
        - postgres_pod['resources'] | length
        - postgres_pod['resources'][0]['status']['phase'] == 'Running'
        - postgres_pod['resources'][0]['status']['containerStatuses'][0]['ready'] == true
      delay: 5
      retries: 60
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ ansible_operator_meta.namespace }}"
        label_selectors:
          - "{{ postgres_label_selector }}"

    - name: Set the resource pod name as a variable.
      set_fact:
        postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"
  when: awx_postgres_type == 'managed'

- name: Determine the timestamp for the backup once for all nodes
  ansible.builtin.set_fact:
    now: '{{ lookup("pipe", "date +%F-%H%M%S") }}'

- name: Set backup directory name
  ansible.builtin.set_fact:
    backup_dir: /backups/tower-openshift-backup-{{ now }}

- name: Create directory for backup
  kubernetes.core.k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-db-management"
    command: >-
      mkdir -p {{ backup_dir }}

- name: Precreate file for database dump
  kubernetes.core.k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-db-management"
    command: >-
      touch {{ backup_dir }}/tower.db

- name: Set full resolvable host name for postgres pod
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    resolvable_db_host: '{{ (awx_postgres_type == "managed") | ternary(awx_postgres_host + "." + ansible_operator_meta.namespace + ".svc", awx_postgres_host) }}' # yamllint disable-line rule:line-length

- name: Get the current resource task pod information.
  register: awx_task_pod
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    label_selectors:
      - app.kubernetes.io/name={{ deployment_name }}-task
      - app.kubernetes.io/managed-by={{ deployment_type }}-operator
      - app.kubernetes.io/component={{ deployment_type }}
    field_selectors:
      - status.phase=Running

- name: Set the resource pod as a variable.
  ansible.builtin.set_fact:
    awx_task_pod: >-
      {{ awx_task_pod['resources']
         | rejectattr('metadata.deletionTimestamp', 'defined')
         | sort(attribute='metadata.creationTimestamp')
         | first | default({}) }}

- name: Set the resource pod name as a variable.
  ansible.builtin.set_fact:
    postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"

- name: Precreate database partitions
  when: precreate_partition_hours > 0
  register: result
  changed_when: "'Created partitions for' in result.stdout"
  kubernetes.core.k8s_exec:
    namespace: "{{ ansible_operator_meta.namespace }}"
    pod: "{{ awx_task_pod_name }}"
    container: "{{ deployment_name }}-task"
    command: awx-manage precreate_partitions --count='{{ precreate_partition_hours }}'

- name: Set pg_dump command
  no_log: "{{ no_log }}"
  ansible.builtin.set_fact:
    pgdump: >-
      pg_dump --clean --create -h {{ resolvable_db_host }} -U {{ awx_postgres_user }} -d {{ awx_postgres_database }} -p {{ awx_postgres_port }} -F custom {{ pg_dump_suffix
      }}

- name: Write pg_dump to backup on PVC
  register: data_migration
  no_log: "{{ no_log }}"
  failed_when: "'Successful' not in data_migration.stdout"
  kubernetes.core.k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-db-management"
    command: |
      bash -c "
      function end_keepalive {
        rc=$?
        rm -f \"$1\"
        kill $(cat /proc/$2/task/$2/children 2>/dev/null) 2>/dev/null || true
        wait $2 || true
        exit $rc
      }
      keepalive_file=\"$(mktemp)\"
      while [[ -f \"$keepalive_file\" ]]; do
        echo 'Dumping data from database...'
        sleep 60
      done &
      keepalive_pid=$!
      trap 'end_keepalive \"$keepalive_file\" \"$keepalive_pid\"' EXIT SIGINT SIGTERM
      echo keepalive_pid: $keepalive_pid
      set -e -o pipefail
      PGPASSWORD='{{ awx_postgres_pass }}' {{ pgdump }} > {{ backup_dir }}/tower.db
      set +e +o pipefail
      echo 'Successful'
      "
